<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>//localhost:1313/</link>
    <description>Recent content on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>email@example.com (James Chua)</managingEditor>
    <webMaster>email@example.com (James Chua)</webMaster>
    <lastBuildDate>Sat, 08 Feb 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="//localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>About James Chua</title>
      <link>//localhost:1313/about/</link>
      <pubDate>Sat, 08 Feb 2025 00:00:00 +0000</pubDate><author>email@example.com (James Chua)</author>
      <guid>//localhost:1313/about/</guid>
      <description>Hi! I&amp;rsquo;m working as an alignment researcher at TruthfulAI, a new org in Berkeley headed by Owain Evans.. Previously I&amp;rsquo;ve worked as a machine learning engineer (LeadiQ 2020-2023), and as a MATS 2023 scholar under Ethan Perez. My current interests are truthfulness and the limits of reasoning.&#xA;I enjoy making typesafe python packages such as Slist on the side.&#xA;Links Google Scholar | Twitter | chuajamessh &amp;lt; at &amp;gt; gmail.</description>
    </item>
    <item>
      <title>My New Paper On Introspection</title>
      <link>//localhost:1313/post/new_paper_introspection/</link>
      <pubDate>Fri, 06 Dec 2024 00:43:06 +0800</pubDate><author>email@example.com (James Chua)</author>
      <guid>//localhost:1313/post/new_paper_introspection/</guid>
      <description>Our new paper on introspection is out!&#xA;Paper website&#xA;Abstract&#xA;Humans acquire knowledge by observing the external world, but also by introspection. Introspection gives a person privileged access to their current state of mind (e.g., thoughts and feelings) that is not accessible to external observers. Can LLMs introspect? We define introspection as acquiring knowledge that is not contained in or derived from training data but instead originates from internal states. Such a capability could enhance model interpretability.</description>
    </item>
    <item>
      <title>Copy pasting to accelerate research</title>
      <link>//localhost:1313/post/copy_paste/</link>
      <pubDate>Sat, 16 Nov 2024 10:16:57 -0800</pubDate><author>email@example.com (James Chua)</author>
      <guid>//localhost:1313/post/copy_paste/</guid>
      <description>After been doing empirical research for a year+ now, I&amp;rsquo;ve concluded that copy pasting accelerates research. Consider not refactoring as the default.&#xA;Bell curve Why not to refactor.&#xA;Early in a project, you&amp;rsquo;ve got a lot of ideas and you want to try them out. You can refactor your code to take this into account. This adds alot of complexity and makes it very hard to debug. Most of the time, your final work isn&amp;rsquo;t going to use all these variations.</description>
    </item>
    <item>
      <title>What I did from June 2023 to March 2024 - my MATS experience</title>
      <link>//localhost:1313/post/serimats_experience/</link>
      <pubDate>Wed, 20 Mar 2024 16:37:36 +0800</pubDate><author>email@example.com (James Chua)</author>
      <guid>//localhost:1313/post/serimats_experience/</guid>
      <description>This post may be interest people who&#xA;are interested in getting into AI alignment / the MATS program are interested in the soft skills that I&amp;rsquo;ve found valuable in developing when working on a research project Background In 2023 I was working as a machine learning engineer. I wanted to work on AI alignment problems. I quit my job and participated in the MATS Summer 2023 program. The MATS program puts you together with others to work on AI alignment problems under a specific mentor.</description>
    </item>
    <item>
      <title>Mutable Defaults and How to Fix them</title>
      <link>//localhost:1313/post/mutable-defaults-and-how-to-fix/</link>
      <pubDate>Tue, 19 Mar 2024 18:48:19 +0800</pubDate><author>email@example.com (James Chua)</author>
      <guid>//localhost:1313/post/mutable-defaults-and-how-to-fix/</guid>
      <description>Most people know the issue with mutable defaults in Python. But what&amp;rsquo;s the best way to fix it?&#xA;The issue class User: def __init__(self, name: str, emails: list[str] = []) -&amp;gt; None: self.name = name self.emails = emails def add_email(self, email: str) -&amp;gt; None: self.emails.append(email) james = User(name=&amp;#34;James&amp;#34;) james.add_email(&amp;#34;james@gmail.com&amp;#34;) john = User(name=&amp;#34;John&amp;#34;) # John will have the emails [&amp;#39;james@gmail.com&amp;#39;], even though we never added that email to John&amp;#39;s list. # That&amp;#39;s a bug!</description>
    </item>
    <item>
      <title>When my Cats are not Animals - an explanation of invariance and covariance</title>
      <link>//localhost:1313/post/why_you_cant_put_a_cat_together_with_animals/</link>
      <pubDate>Tue, 19 Mar 2024 15:44:15 +0800</pubDate><author>email@example.com (James Chua)</author>
      <guid>//localhost:1313/post/why_you_cant_put_a_cat_together_with_animals/</guid>
      <description>Let&amp;rsquo;s say you have a parent class Animal and a child class Cat that inherits from Animal. You might think that you can add a Cat to a list of Animals. But then your pyright / vscode / mypy linter will complain that you can&amp;rsquo;t do that. Why is that?&#xA;Let&amp;rsquo;s start with a simple example:&#xA;class Animal: def make_sound(self) -&amp;gt; None: print(f&amp;#34;animal!&amp;#34;) class Dog(Animal): ... class Cat(Animal): ... def meow(self) -&amp;gt; None: print(&amp;#34;meow!</description>
    </item>
    <item>
      <title>Native zip is evil</title>
      <link>//localhost:1313/post/evil_zip/</link>
      <pubDate>Sat, 16 Mar 2024 00:00:00 +0000</pubDate><author>email@example.com (James Chua)</author>
      <guid>//localhost:1313/post/evil_zip/</guid>
      <description>The zip function is a built-in function in Python that allows you to combine two or more iterables into a single iterable. This is a useful function, but it has a very dangerous pitfall that can lead to very subtle bugs. It does not raise an error when the two iterables have different lengths. Instead, it will silently ignore the extra elements of the longer iterable. This can lead to very hard to track bugs (and has hurt me in the past).</description>
    </item>
    <item>
      <title></title>
      <link>//localhost:1313/future/copying_the_whole_object_pros_and_cons_and_sentinels/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>email@example.com (James Chua)</author>
      <guid>//localhost:1313/future/copying_the_whole_object_pros_and_cons_and_sentinels/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>//localhost:1313/future/i_like_chaining_methods_so_i_made_a_list_library/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>email@example.com (James Chua)</author>
      <guid>//localhost:1313/future/i_like_chaining_methods_so_i_made_a_list_library/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>//localhost:1313/future/my_new_paper_on_introspection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>email@example.com (James Chua)</author>
      <guid>//localhost:1313/future/my_new_paper_on_introspection/</guid>
      <description>https://modelintrospection.com</description>
    </item>
    <item>
      <title></title>
      <link>//localhost:1313/future/mypy_vs_pyright/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>email@example.com (James Chua)</author>
      <guid>//localhost:1313/future/mypy_vs_pyright/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>//localhost:1313/future/python_list_comprehensions_are_weird/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>email@example.com (James Chua)</author>
      <guid>//localhost:1313/future/python_list_comprehensions_are_weird/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>//localhost:1313/future/research_slides_tips/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>email@example.com (James Chua)</author>
      <guid>//localhost:1313/future/research_slides_tips/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>//localhost:1313/future/the_importance_of_luck/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>email@example.com (James Chua)</author>
      <guid>//localhost:1313/future/the_importance_of_luck/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>//localhost:1313/future/the_self_typing_trick_slist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>email@example.com (James Chua)</author>
      <guid>//localhost:1313/future/the_self_typing_trick_slist/</guid>
      <description>// Talk about self: Slist[int] hacks</description>
    </item>
  </channel>
</rss>
